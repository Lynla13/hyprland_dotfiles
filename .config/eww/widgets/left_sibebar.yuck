;; ** Variables

;; --- Listeners & Polls ---
;; Use `deflisten` with `playerctl --follow` to react to player events
;; efficiently. When a player quits, `playerctl` exits, and the `|| echo`
;; part provides a default value, ensuring the UI updates correctly.
(deflisten song_title    :initial "No Music Playing"
"playerctl metadata --format '{{title}}' --follow || echo 'No Music Playing'")

(deflisten song_artist   :initial "Unknown Artist"
"playerctl metadata --format '{{artist}}' --follow || echo 'Unknown Artist'")

(deflisten player_status :initial "Stopped"
"playerctl metadata --format '{{status}}' --follow || echo 'Stopped'")

;; Polling is still needed for things that change continuously, like position,
;; but we can use longer, more efficient intervals.
(defpoll song_length_s   :interval "2s"
"playerctl metadata mpris:length | awk '{print $1 / 1000000}' || echo 1")

(defpoll song_position_s    :interval "1s" "playerctl position || echo 0")

(defpoll formatted_position :interval "1s" "playerctl position -f '{{duration(position)}}' || echo '0:00'")

;; Cover art and volume can also be polled at a slower rate.
(defpoll cover_art_path :interval "1s" "/home/lynla_13/.config/eww/scripts/get_cover.sh")


(defvar image-files "[]")

(defvar my-json "[10, 12, 33]")

(defpoll current_volume :interval 100 "echo |pactl get-sink-volume @DEFAULT_SINK@ | awk -F/ '{print $2}' | tr -d ' ' | sed 's/%$//'")
(defpoll username :interval 36000  "whoami")

(defpoll background :interval 36000 "echo | ps aux | grep swaybg | awk -F'swaybg' '{print $2}'| awk '{print $2}' | head -n 1" )

(defpoll note :interval 60 "head -n 5 ~/Documents/notes.txt")

(defpoll quote :interval "1000s" "fortune -s -n 70")

(defvar show_home false)


;; --- Widget Definition ---

(defwidget lsb_music_widget []
  (box :class "lsb_music_widget" :orientation "v" :space-evenly false
    (box :class "lsb_mw_bg_tm"
      (image :path {cover_art_path} :image-width 260)
    )
    (box :class "lsb_mw_info" :orientation "v" :space-evenly false
      (scale :class "lsb_progress_bar" 
              :min 0 
              :max song_length_s 
              :value song_position_s 
              :onchange "playerctl position {}"
      )
      (label :class "lsb_mw_title" :text song_title :limit-width 25)
      (label :class "lsb_mw_artist" :text song_artist :limit-width 25)
      (box :class "lsb_mw_controls" :orientation "h"
        (button :onclick "playerctl previous" "󰒮")
        (button :onclick "playerctl play-pause" {player_status == "Playing" ? "󰏤" : "󰐊"})
        (button :onclick "playerctl next" "󰒭")
      )
                  
    )
    
  )
)




(defwidget lbs_notes []
  (box :spacing 1 :class "lbs_notes" :orientation "v" :space-evenly "false" 
    (label :text {note} :wrap true :class "lb_notes" )
    (box :orientation "h"
      (button :class "btn_notes" :onclick "echo '' > ~/Documents/notes.txt" "[ Empty ]")
      (button :class "btn_notes" :onclick "xdg-open ~/Documents/notes.txt" "[ Edit TODO ]")
    )
  )
)


(defwidget lbs_quote [] 
  (box :class "lbs_quote" :spacing 2 :space-evenly "false" :orientation "v"
      (label :text {quote} :wrap true)
  )
)

(defwidget lsb_volume []
  (box :class "lsb_volume" :orientation "h" :spacing 5 :space-evenly "false" 
    (label :text " ")
    (scale :active true :class "scl_volume" :min 0 :max 110 
           :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
           :value {current_volume}  )
    
  )
)


(defwidget lsb_titles []
  (box :class "lsb_titles"
    (label :text {username})    
  )
)


(defwidget lsb_task []
    (box :class "lsb_task" :orientation "vertical" :spacing 10
      (box :class "lsb_top_row" :orientation "h" :spacing :10
        
        )
      
      (box :class "lsb_middle_row" :orientation "h" :spacing :10)
      (box :class "lsb_bottom_row" :orientation "v" :spacing :10)
))
  

(defwidget lsb_power_menu []
  (box :class "lsb_power_menu" :orientation "horizontal" :space-evenly "false"
    (button :class "btn_pw_menu" :onclick "shurdown now"
      (box (label :text " ") ))
    (button :class "btn_pw_menu" :onclick "reboot"
      (box (label :text " ")))
    (button :class "btn_pw_menu" :onclick "hyprlock"
      (box (label :text " ")))
    (button :class "btn_pw_menu" :onclick "hyprctl dispatch exit"
      (box (label :text " ")))

))


;;;;;;;;HOMEPAGE

(defwidget lsb_homepage []
  (revealer :transition "slideup" :reveal {show_home}
    (box :class "lsb_homepage" :orientation "vertical" :spacing 10 
    :space-evenly "false"
      (box :class "lsb_top_row" :orientation "h" :spacing :10 :space-evenly "false"
        (box :class "user_avatar"
          (image :path {background}  :image-width 200 
                 :image-height 150)
        )
        (box :class "file_link" :orientation "v" :spacing 1
          (button :class "btn_file" :onclick "xdg-open ~/Downloads"
            (box (label :text "  Downloads") ))
          (button :class "btn_file" :onclick "xdg-open ~/Pictures"
            (box (label :text "  Pictures") ))
          (button :class "btn_file" :onclick "xdg-open ~/Videos"
            (box (label :text "  Videos") ))
          (button :class "btn_file" :onclick "xdg-open ~/Documents"
            (box (label :text " Documents") ))
          (button :class "btn_file" :onclick "xdg-open ~/.config"
            (box (label :text "  Configs") ))

        ))
      (box :class "lsb_middle_row" :orientation "v" :space-evenly "false"
        (lsb_volume)
        (lsb_power_menu)
        (lbs_quote)
        (lbs_notes)

      )
      (box :class "lsb_bottom_row" :orientation "v" :spacing :10 
        ( lsb_music_widget)
      )
  
     )
    )
)
  


(defwidget lsb_menu []
  (box :class "lsb_menu" :orientation "horizontal" :space-evenly "false"
    (button :class "btn_menu" :onclick "eww update show_home=true"
      (box (label :text " " )))
    (button :class "btn_menu" :onclick "eww update show_home=false"
      (box (label :text " ")))
    (button :class "btn_menu" :onclick "notify-send 'EWW' 'Button được nhấn!'"
      (box (label :text " ")))
    (button :class "btn_menu" :onclick "notify-send 'EWW' 'Button được nhấn!'"
      (box (label :text " ")))

))

;; ** Windows 
;; Left Sidebar

(defwindow left_sidebar :monitor 0  :class "left_sidebar"
  :geometry (geometry :x "0%" :y "10px" :width "20%"  :height "95%"  :anchor "top left")
  :stacking "fg" :reserve (struts :distance "40px" :side "top")
  :windowtype "dock" :wm-ignore false
  (box :class "lsb_container" :orientation "v" :space-evenly "false" :spacing 10
    (lsb_titles) 
    (lsb_homepage)
    (lsb_menu)
  )
)
